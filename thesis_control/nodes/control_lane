#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
from std_msgs.msg import Float64
from geometry_msgs.msg import Twist
from thesis_detect.msg import DetectCollision
from thesis_detect.collision_enum import collision_enum
from thesis_detect.math_util import *
import time


class ControlLane():
    def __init__(self):
        self.sub_lane = rospy.Subscriber('control/lane', Float64, self.cb_follow_lane, queue_size=1)
        self.sub_max_vel = rospy.Subscriber('control/max_vel', Float64, self.cb_get_max_vel, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('control/cmd_vel', Twist, queue_size=1)
        self.sub_collision = rospy.Subscriber('detect/traffic/collision', DetectCollision, self.cb_collision, queue_size=1)
        self.last_collision_detection = time.time() * 1000

        self.lastError = 0
        self.REAL_MAX_VEL = 0.12
        self.MAX_VEL = self.REAL_MAX_VEL
        self.collision_triggered = False
        self.time_frame_after_collision = 2000
        self.immediate_collision = False
        self.min_vehicle_distance = 0.05
        self.safe_radius = 0.3

        rospy.on_shutdown(self.shutdown)

        loop_rate = rospy.Rate(10)  # 10hz
        while not rospy.is_shutdown():
            if self.collision_triggered and self.last_collision_detection < time.time() * 1000 - self.time_frame_after_collision:
                self.MAX_VEL = self.REAL_MAX_VEL
                self.collision_triggered = False
                self.immediate_collision = False

            loop_rate.sleep()

    def cb_get_max_vel(self, max_vel_msg):
        self.MAX_VEL = max_vel_msg.data

    def cb_collision(self, msg):
        if msg.type in (collision_enum.vehicle_ahead.value, collision_enum.immediate_collision.value):
            self.last_collision_detection = time.time() * 1000
            self.collision_triggered = True

            if msg.type == collision_enum.vehicle_ahead.value and not self.immediate_collision:
                c_pose = msg.current_vehicle_pose
                o_pose = msg.other_vehicle_pose
                vc_pose = np.arry([c_pose.pose.position.x, c_pose.pose.position.y, c_pose.pose.position.z])
                vo_pose = np.arry([o_pose.pose.position.x, o_pose.pose.position.y, o_pose.pose.position.z])
                distance = get_distance_between_vectors(vc_pose, vo_pose)
                distance = distance - self.min_vehicle_distance
                if distance < 0:
                    distance = 0

                #min offset is 0.3, so 0.25 represents the max distance at which 100% of other vehicle speed should be taken
                scale = distance / (self.safe_radius - self.min_vehicle_distance)
                self.MAX_VEL = msg.twist.twist.angular.z * scale


            elif msg.type == collision_enum.immediate_collision.value:
                self.MAX_VEL = 0
                self.immediate_collision = True





    def cb_follow_lane(self, desired_center):
        center = desired_center.data

        error = center - 500

        Kp = 0.0025
        Kd = 0.007

        angular_z = Kp * error + Kd * (error - self.lastError)
        self.lastError = error
        twist = Twist()
        twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), 0.2)
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
        self.pub_cmd_vel.publish(twist)

    def shutdown(self):
        rospy.loginfo("Shutting down. cmd_vel will be 0")

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
