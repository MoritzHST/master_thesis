#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
from std_msgs.msg import Float64
from thesis_detect.msg import DetectCollision
from thesis_detect.collision_enum import collision_enum
from thesis_detect.math_util import *
from tf.transformations import euler_from_quaternion
import time
from random import randrange


class ControlTraffic():
    def __init__(self):
        self.sub_max_vel = rospy.Subscriber('control/max_vel', Float64, self.cb_get_max_vel, queue_size=1)
        self.pub_max_vel = rospy.Publisher('control/max_vel', Float64, queue_size=1)
        self.sub_collision = rospy.Subscriber('detect/traffic/collision', DetectCollision, self.cb_collision,
                                              queue_size=1)
        self.last_collision_detection = time.time() * 1000

        self.REAL_MAX_VEL = 0.12
        self.MAX_VEL = self.REAL_MAX_VEL
        self.collision_triggered = False
        self.time_frame_after_collision = 2000
        self.immediate_collision = False
        self.min_vehicle_distance = 0.25
        self.safe_radius = 0.5
        self.last_velocity = 0.0
        self.published = False

        self.rand = randrange(100)

        loop_rate = rospy.Rate(10)  # 10hz
        while not rospy.is_shutdown():
            if self.last_collision_detection < time.time() * 1000 - self.time_frame_after_collision:
                self.MAX_VEL = self.REAL_MAX_VEL
                self.collision_triggered = False
                self.immediate_collision = False
                self.pub_max_vel.publish(self.MAX_VEL)

            loop_rate.sleep()

    def cb_get_max_vel(self, max_vel_msg):
        if self.published and self.last_velocity == max_vel_msg:
            self.published = False
            self.last_velocity = 0
        else:
            self.MAX_VEL = max_vel_msg.data

    def cb_collision(self, msg):
        vel = self.REAL_MAX_VEL
        self.last_collision_detection = time.time() * 1000
        rospy.loginfo("%d %d" % (self.rand, msg.collision_type))
        if msg.collision_type in (collision_enum.vehicle_ahead.value, collision_enum.immediate_collision.value):
            self.collision_triggered = True
            if msg.collision_type == collision_enum.vehicle_ahead.value and not self.immediate_collision:
                c_pose = msg.current_vehicle_pose
                o_pose = msg.other_vehicle_pose
                vc_pose = np.array([c_pose.pose.position.x, c_pose.pose.position.y, c_pose.pose.position.z])
                vo_pose = np.array([o_pose.pose.position.x, o_pose.pose.position.y, o_pose.pose.position.z])
                distance = get_distance_between_vectors(vc_pose, vo_pose)
                distance = distance - self.min_vehicle_distance
                if distance < 0:
                    distance = 0

                # min offset is 0.3, so 0.25 represents the max distance at which 100% of other vehicle speed should be taken
                scale = distance / (self.safe_radius - self.min_vehicle_distance)
                vel = min(msg.other_vehicle_twist.twist.linear.x * scale, self.MAX_VEL)

            elif msg.collision_type == collision_enum.immediate_collision.value:
                vel = 0
                self.immediate_collision = True
        elif msg.collision_type == collision_enum.intersection.value:
            c_pose = msg.current_vehicle_pose
            o_pose = msg.other_vehicle_pose
            vc_pose = np.array([c_pose.pose.position.x, c_pose.pose.position.y])
            vo_pose = np.array([o_pose.pose.position.x, o_pose.pose.position.y])
            other_vehicle_position = vo_pose - vc_pose
            rot_q = msg.current_vehicle_pose.pose.orientation
            _, _, current_yaw = euler_from_quaternion([rot_q.x, rot_q.y, rot_q.z, rot_q.w])

            if msg.distance_till_collision < 0.5:
                rel_other_vehicle = rotate_point_around_origin(other_vehicle_position, -current_yaw)
                # vehicle is left, therefore has priority
                if rel_other_vehicle[1] > 0:
                    # slow down to prevent collision proactively
                    vel = self.MAX_VEL * 0.75
        self.publish_velocity(vel)

    def publish_velocity(self, vel):
        self.published = True
        self.last_velocity = vel
        self.pub_max_vel.publish(vel)

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('control_traffic')
    node = ControlTraffic()
    node.main()
